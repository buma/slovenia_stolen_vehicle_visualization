# coding: utf-8
from sqlalchemy import (
        BigInteger, Column, Float, Integer, MetaData, Table,
        Text, DateTime, Boolean
        )
from sqlalchemy.dialects.postgresql.hstore import HSTORE
from geoalchemy2 import Geometry
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker, scoped_session, aliased
#from dateutil.parser import parse
from shapely.geometry import Point, Polygon
from geoalchemy2.shape import from_shape, to_shape
#from functions import ST_Collect, ST_ConvexHull
from geoalchemy2.functions import (
        ST_Buffer,
        ST_AsGeoJSON,
        ST_Transform,
        ST_Contains,
        ST_Distance,
        ST_DWithin,
	ST_Length
        )

DBSession = scoped_session(sessionmaker())

Base = declarative_base()
metadata = Base.metadata



t_planet_osm_line = Table(
    'planet_osm_line', metadata,
    Column('osm_id', BigInteger, index=True, primary_key=True),
    Column('access', Text),
    Column('addr:housename', Text),
    Column('addr:housenumber', Text),
    Column('addr:interpolation', Text),
    Column('admin_level', Text),
    Column('aerialway', Text),
    Column('aeroway', Text),
    Column('amenity', Text),
    Column('area', Text),
    Column('barrier', Text),
    Column('bicycle', Text),
    Column('brand', Text),
    Column('bridge', Text),
    Column('boundary', Text),
    Column('building', Text),
    Column('construction', Text),
    Column('covered', Text),
    Column('culvert', Text),
    Column('cutting', Text),
    Column('denomination', Text),
    Column('disused', Text),
    Column('embankment', Text),
    Column('foot', Text),
    Column('generator:source', Text),
    Column('harbour', Text),
    Column('highway', Text),
    Column('historic', Text),
    Column('horse', Text),
    Column('intermittent', Text),
    Column('junction', Text),
    Column('landuse', Text),
    Column('layer', Text),
    Column('leisure', Text),
    Column('lock', Text),
    Column('man_made', Text),
    Column('military', Text),
    Column('motorcar', Text),
    Column('name', Text),
    Column('natural', Text),
    Column('oneway', Text),
    Column('operator', Text),
    Column('population', Text),
    Column('power', Text),
    Column('power_source', Text),
    Column('place', Text),
    Column('railway', Text),
    Column('ref', Text),
    Column('religion', Text),
    Column('route', Text),
    Column('service', Text),
    Column('shop', Text),
    Column('sport', Text),
    Column('toll', Text),
    Column('tourism', Text),
    Column('tower:type', Text),
    Column('tracktype', Text),
    Column('tunnel', Text),
    Column('water', Text),
    Column('waterway', Text),
    Column('wetland', Text),
    Column('width', Text),
    Column('wood', Text),
    Column('z_order', Integer),
    Column('way_area', Float),
    Column('lcn_ref', Text),
    Column('rcn_ref', Text),
    Column('ncn_ref', Text),
    Column('lcn', Text),
    Column('rcn', Text),
    Column('ncn', Text),
    Column('lwn_ref', Text),
    Column('rwn_ref', Text),
    Column('nwn_ref', Text),
    Column('lwn', Text),
    Column('rwn', Text),
    Column('nwn', Text),
    Column('route_pref_color', Text),
    Column('route_name', Text),
    Column('mtb', Text),
    Column('mtb:scale', Text),
    Column('mtb:scale:uphill', Text),
    Column('mtb:type', Text),
    Column('mtb:description', Text),
    Column('mtb_ref', Text),
    Column('incline', Text),
    Column('surface', Text),
    Column('kct_yellow', Text),
    Column('kct_red', Text),
    Column('kct_green', Text),
    Column('kct_blue', Text),
    Column('marked_trail', Text),
    Column('marked_trail_yellow', Text),
    Column('marked_trail_red', Text),
    Column('marked_trail_green', Text),
    Column('marked_trail_blue', Text),
    Column('network', Text),
    Column('iwn', Text),
    Column('cycleway:surface', Text),
    Column('cycleway:width', Text),
    Column('state', Text),
    Column('cycleway', Text),
    Column('ramp:bicycle', Text),
    Column('cycleway:left', Text),
    Column('cycleway:right', Text),
    Column('oneway:bicycle', Text),
    Column('service:bicycle:retail', Text),
    Column('service:bicycle:repair', Text),
    Column('service:bicycle:rental', Text),
    Column('service:bicycle:pump', Text),
    Column('service:bicycle:diy', Text),
    Column('service:bicycle:cleaning', Text),
    Column('service:bicycle:second_hand', Text),
    Column('tags', HSTORE, index=True),
    Column('way', Geometry(u'LINESTRING', 900913), index=True)
)

class PlanetOsmLine(Base):
    __table__ = t_planet_osm_line

    @staticmethod
    def get_street(name):
        datas = DBSession.query(PlanetOsmLine.name,
                PlanetOsmLine.osm_id,
                ST_AsGeoJSON(ST_Transform(PlanetOsmLine.way, 4326)).label("geodata"),
                ST_Length(PlanetOsmLine.way).label("length")) \
                .filter(PlanetOsmLine.name.ilike(name)) \
                .filter(PlanetOsmPolygon.way.intersects(PlanetOsmLine.way)) \
                .filter(PlanetOsmPolygon.osm_id==-1676328) \
                .filter(ST_Contains(PlanetOsmPolygon.way, PlanetOsmLine.way)) \
                .order_by('length')

        return datas

t_planet_osm_polygon = Table(
    'planet_osm_polygon', metadata,
    Column('osm_id', BigInteger, index=True, primary_key=True),
    Column('access', Text),
    Column('addr:housename', Text),
    Column('addr:housenumber', Text),
    Column('addr:interpolation', Text),
    Column('admin_level', Text),
    Column('aerialway', Text),
    Column('aeroway', Text),
    Column('amenity', Text),
    Column('area', Text),
    Column('barrier', Text),
    Column('bicycle', Text),
    Column('brand', Text),
    Column('bridge', Text),
    Column('boundary', Text),
    Column('building', Text),
    Column('construction', Text),
    Column('covered', Text),
    Column('culvert', Text),
    Column('cutting', Text),
    Column('denomination', Text),
    Column('disused', Text),
    Column('embankment', Text),
    Column('foot', Text),
    Column('generator:source', Text),
    Column('harbour', Text),
    Column('highway', Text),
    Column('historic', Text),
    Column('horse', Text),
    Column('intermittent', Text),
    Column('junction', Text),
    Column('landuse', Text),
    Column('layer', Text),
    Column('leisure', Text),
    Column('lock', Text),
    Column('man_made', Text),
    Column('military', Text),
    Column('motorcar', Text),
    Column('name', Text),
    Column('natural', Text),
    Column('oneway', Text),
    Column('operator', Text),
    Column('population', Text),
    Column('power', Text),
    Column('power_source', Text),
    Column('place', Text),
    Column('railway', Text),
    Column('ref', Text),
    Column('religion', Text),
    Column('route', Text),
    Column('service', Text),
    Column('shop', Text),
    Column('sport', Text),
    Column('toll', Text),
    Column('tourism', Text),
    Column('tower:type', Text),
    Column('tracktype', Text),
    Column('tunnel', Text),
    Column('water', Text),
    Column('waterway', Text),
    Column('wetland', Text),
    Column('width', Text),
    Column('wood', Text),
    Column('z_order', Integer),
    Column('way_area', Float),
    Column('lcn_ref', Text),
    Column('rcn_ref', Text),
    Column('ncn_ref', Text),
    Column('lcn', Text),
    Column('rcn', Text),
    Column('ncn', Text),
    Column('lwn_ref', Text),
    Column('rwn_ref', Text),
    Column('nwn_ref', Text),
    Column('lwn', Text),
    Column('rwn', Text),
    Column('nwn', Text),
    Column('route_pref_color', Text),
    Column('route_name', Text),
    Column('mtb', Text),
    Column('mtb:scale', Text),
    Column('mtb:scale:uphill', Text),
    Column('mtb:type', Text),
    Column('mtb:description', Text),
    Column('mtb_ref', Text),
    Column('incline', Text),
    Column('surface', Text),
    Column('kct_yellow', Text),
    Column('kct_red', Text),
    Column('kct_green', Text),
    Column('kct_blue', Text),
    Column('marked_trail', Text),
    Column('marked_trail_yellow', Text),
    Column('marked_trail_red', Text),
    Column('marked_trail_green', Text),
    Column('marked_trail_blue', Text),
    Column('network', Text),
    Column('iwn', Text),
    Column('cycleway:surface', Text),
    Column('cycleway:width', Text),
    Column('state', Text),
    Column('cycleway', Text),
    Column('ramp:bicycle', Text),
    Column('cycleway:left', Text),
    Column('cycleway:right', Text),
    Column('oneway:bicycle', Text),
    Column('service:bicycle:retail', Text),
    Column('service:bicycle:repair', Text),
    Column('service:bicycle:rental', Text),
    Column('service:bicycle:pump', Text),
    Column('service:bicycle:diy', Text),
    Column('service:bicycle:cleaning', Text),
    Column('service:bicycle:second_hand', Text),
    Column('tags', HSTORE, index=True),
    Column('way', Geometry(srid=900913), index=True)
)

class PlanetOsmPolygon(Base):
    __table__ = t_planet_osm_polygon

    @staticmethod
    def get_static_regions():
        datas = DBSession.query(PlanetOsmPolygon.name,
                PlanetOsmPolygon.osm_id.label("region_id"),
		PlanetOsmPolygon.name) \
                .filter(PlanetOsmPolygon.admin_level=='8') \
		.filter(PlanetOsmPolygon.name=='Maribor')
                #ST_AsGeoJSON(ST_Transform(PlanetOsmPolygon.way, 4326)).label("geodata")) \
        return datas

